$date
	Sun Oct  8 23:01:05 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var reg 1 ! clock $end
$var reg 1 " reset $end
$var integer 32 # i [31:0] $end
$scope module cpu $end
$var wire 1 ! clock $end
$var wire 1 $ clock_real $end
$var wire 1 % enable $end
$var wire 1 " reset $end
$var wire 32 & wr_if_branch_target [31:0] $end
$var wire 1 ' wr_if_pc_src $end
$var wire 1 ( wr_if_PCSrc $end
$var wire 32 ) rom_data [31:0] $end
$var wire 32 * rom_address [31:0] $end
$var wire 32 + rb_write_value [31:0] $end
$var wire 1 , rb_write_enable $end
$var wire 5 - rb_write_address [4:0] $end
$var wire 32 . rb_value2 [31:0] $end
$var wire 32 / rb_value1 [31:0] $end
$var wire 5 0 rb_read_address2 [4:0] $end
$var wire 5 1 rb_read_address1 [4:0] $end
$var wire 1 2 ram_write_enable $end
$var wire 32 3 ram_data_out [31:0] $end
$var wire 32 4 ram_data_in [31:0] $end
$var wire 32 5 ram_address [31:0] $end
$var wire 1 6 mem_wb_mem_done $end
$var wire 32 7 mem_wb_data_out [31:0] $end
$var wire 1 8 mem_wb_RegWrite $end
$var wire 5 9 mem_wb_RegDest [4:0] $end
$var wire 1 : mem_wb_RegDataSrc $end
$var wire 1 ; mem_wb_PCSrc $end
$var wire 1 < mem_wb_MemToReg $end
$var wire 32 = mem_wb_AluResult [31:0] $end
$var wire 6 > led [5:0] $end
$var wire 32 ? if_de_pc [31:0] $end
$var wire 32 @ if_de_instr [31:0] $end
$var wire 32 A ex_mem_rs2_value [31:0] $end
$var wire 32 B ex_mem_result [31:0] $end
$var wire 1 C ex_mem_RegWrite $end
$var wire 5 D ex_mem_RegDest [4:0] $end
$var wire 1 E ex_mem_RegDataSrc $end
$var wire 1 F ex_mem_PCSrc $end
$var wire 1 G ex_mem_MemWrite $end
$var wire 1 H ex_mem_MemToReg $end
$var wire 1 I ex_mem_MemRead $end
$var wire 32 J de_ex_imm [31:0] $end
$var wire 1 K de_ex_aluSrc $end
$var wire 3 L de_ex_aluOp [2:0] $end
$var wire 1 M de_ex_RegWrite $end
$var wire 5 N de_ex_RegDest [4:0] $end
$var wire 1 O de_ex_RegDataSrc $end
$var wire 1 P de_ex_PCSrc $end
$var wire 1 Q de_ex_MemWrite $end
$var wire 1 R de_ex_MemToReg $end
$var wire 1 S de_ex_MemRead $end
$var wire 1 T de_ex_Branch $end
$var wire 4 U de_ex_AluControl [3:0] $end
$scope module Decode $end
$var wire 1 $ clk $end
$var wire 1 " rst $end
$var wire 6 V shamt [5:0] $end
$var wire 5 W rs2 [4:0] $end
$var wire 5 X rs1 [4:0] $end
$var wire 7 Y opcode [6:0] $end
$var wire 32 Z next_instruction [31:0] $end
$var wire 7 [ func7 [6:0] $end
$var wire 3 \ func3 [2:0] $end
$var wire 5 ] RegDest [4:0] $end
$var reg 4 ^ AluControl [3:0] $end
$var reg 3 _ AluOp [2:0] $end
$var reg 1 K AluSrc $end
$var reg 1 T Branch $end
$var reg 1 S MemRead $end
$var reg 1 R MemToReg $end
$var reg 1 Q MemWrite $end
$var reg 1 P PCSrc $end
$var reg 1 O RegDataSrc $end
$var reg 1 M RegWrite $end
$var reg 32 ` _instruction [31:0] $end
$var reg 32 a imm [31:0] $end
$upscope $end
$scope module Execute $end
$var wire 4 b AluControl [3:0] $end
$var wire 3 c AluOp [2:0] $end
$var wire 1 K AluSrc $end
$var wire 1 T Branch $end
$var wire 32 d PC [31:0] $end
$var wire 1 $ clk $end
$var wire 32 e imm [31:0] $end
$var wire 1 S in_MemRead $end
$var wire 1 R in_MemToReg $end
$var wire 1 Q in_MemWrite $end
$var wire 1 P in_PCSrc $end
$var wire 1 O in_RegDataSrc $end
$var wire 5 f in_RegDest [4:0] $end
$var wire 1 M in_RegWrite $end
$var wire 1 " rst $end
$var wire 32 g rs2_value [31:0] $end
$var wire 32 h rs1_value [31:0] $end
$var wire 32 i result [31:0] $end
$var reg 4 j _AluControl [3:0] $end
$var reg 3 k _AluOp [2:0] $end
$var reg 1 l _AluSrc $end
$var reg 1 m _MemRead $end
$var reg 1 n _MemToReg $end
$var reg 1 o _MemWrite $end
$var reg 32 p _PC [31:0] $end
$var reg 1 q _PCSrc $end
$var reg 1 r _RegDataSrc $end
$var reg 5 s _RegDest [4:0] $end
$var reg 1 t _RegWrite $end
$var reg 32 u _imm [31:0] $end
$var reg 32 v _rs1_value [31:0] $end
$var reg 32 w _rs2_value [31:0] $end
$var reg 32 x a [31:0] $end
$var reg 32 y b [31:0] $end
$var reg 1 I out_MemRead $end
$var reg 1 H out_MemToReg $end
$var reg 1 G out_MemWrite $end
$var reg 1 F out_PCSrc $end
$var reg 1 E out_RegDataSrc $end
$var reg 5 z out_RegDest [4:0] $end
$var reg 1 C out_RegWrite $end
$scope module alu $end
$var wire 4 { AluControl [3:0] $end
$var wire 32 | a [31:0] $end
$var wire 32 } b [31:0] $end
$var parameter 4 ~ ADDITION $end
$var parameter 4 !" ARIT_SRIGHT $end
$var parameter 4 "" BITWISE_AND $end
$var parameter 4 #" BITWISE_NOT $end
$var parameter 4 $" BITWISE_OR $end
$var parameter 4 %" BITWISE_XOR $end
$var parameter 4 &" SHIFT_LEFT $end
$var parameter 4 '" SHIFT_RIGHT $end
$var parameter 4 (" SUBTRACTION $end
$var reg 32 )" result [31:0] $end
$var reg 1 *" zero $end
$upscope $end
$upscope $end
$scope module Fetch $end
$var wire 1 ' PCSrc $end
$var wire 32 +" branch_target [31:0] $end
$var wire 1 $ clk $end
$var wire 32 ," instr [31:0] $end
$var wire 32 -" rom_address [31:0] $end
$var wire 1 " rst $end
$var wire 32 ." rom_data [31:0] $end
$var reg 32 /" pc [31:0] $end
$var reg 32 0" pc_next [31:0] $end
$upscope $end
$scope module Memory $end
$var wire 1 I MemRead $end
$var wire 1 G MemWrite $end
$var wire 32 1" addr [31:0] $end
$var wire 1 $ clk $end
$var wire 32 2" data_in [31:0] $end
$var wire 32 3" data_out [31:0] $end
$var wire 1 H in_MemToReg $end
$var wire 1 F in_PCSrc $end
$var wire 1 E in_RegDataSrc $end
$var wire 5 4" in_RegDest [4:0] $end
$var wire 1 C in_RegWrite $end
$var wire 32 5" mem_addr [31:0] $end
$var wire 32 6" mem_write_data [31:0] $end
$var wire 32 7" out_AluResult [31:0] $end
$var wire 1 < out_MemToReg $end
$var wire 1 ; out_PCSrc $end
$var wire 1 : out_RegDataSrc $end
$var wire 5 8" out_RegDest [4:0] $end
$var wire 1 8 out_RegWrite $end
$var wire 1 " rst $end
$var wire 32 9" mem_read_data [31:0] $end
$var reg 1 :" _MemToReg $end
$var reg 1 ;" _PCSrc $end
$var reg 1 <" _RegDataSrc $end
$var reg 5 =" _RegDest [4:0] $end
$var reg 1 >" _RegWrite $end
$var reg 32 ?" _addr [31:0] $end
$var reg 32 @" _data_in [31:0] $end
$var reg 1 A" _load $end
$var reg 1 B" _store $end
$var reg 1 6 mem_done $end
$var reg 1 2 mem_write_enable $end
$upscope $end
$scope module Ram $end
$var wire 32 C" address [31:0] $end
$var wire 1 $ clk $end
$var wire 32 D" data_in [31:0] $end
$var wire 1 " reset $end
$var wire 1 2 write_enable $end
$var reg 32 E" data_out [31:0] $end
$var integer 32 F" i [31:0] $end
$upscope $end
$scope module RegisterBank $end
$var wire 1 $ clk $end
$var wire 5 G" read_address1 [4:0] $end
$var wire 5 H" read_address2 [4:0] $end
$var wire 1 " reset $end
$var wire 32 I" write_value [31:0] $end
$var wire 1 , write_enable $end
$var wire 5 J" write_address [4:0] $end
$var wire 32 K" value2 [31:0] $end
$var wire 32 L" value1 [31:0] $end
$var integer 32 M" i [31:0] $end
$upscope $end
$scope module Rom $end
$var wire 32 N" address [31:0] $end
$var wire 32 O" data [31:0] $end
$upscope $end
$scope module Writeback $end
$var wire 1 < MemToReg $end
$var wire 1 $ clk $end
$var wire 32 P" data_mem [31:0] $end
$var wire 1 ; in_PCSrc $end
$var wire 5 Q" in_RegDest [4:0] $end
$var wire 1 8 in_RegWrite $end
$var wire 1 6 mem_done $end
$var wire 32 R" result_alu [31:0] $end
$var wire 1 " rst $end
$var reg 1 S" _MemToReg $end
$var reg 1 T" _PCSrc $end
$var reg 5 U" _RegDest [4:0] $end
$var reg 1 V" _RegWrite $end
$var reg 1 W" _mem_done $end
$var reg 32 X" _result_alu [31:0] $end
$var reg 32 Y" data_wb [31:0] $end
$var reg 1 ( out_PCSrc $end
$var reg 5 Z" out_RegDest [4:0] $end
$var reg 1 , out_RegWrite $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 ("
b111 '"
b110 &"
b11 %"
b1 $"
b101 #"
b0 ""
b1000 !"
b10 ~
$end
#0
$dumpvars
b0 Z"
b0 Y"
b0 X"
0W"
0V"
b0 U"
0T"
0S"
b0 R"
b0 Q"
bx P"
b10100000000000010010011 O"
b0 N"
b100001 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b100000000 F"
bx E"
b0 D"
b0 C"
0B"
0A"
b0 @"
b0 ?"
0>"
b0 ="
0<"
0;"
0:"
bx 9"
b0 8"
b0 7"
b0 6"
b0 5"
bx 4"
bx 3"
b0 2"
b0 1"
b0 0"
b0 /"
b10100000000000010010011 ."
b0 -"
b10100000000000010010011 ,"
bz +"
1*"
b0 )"
b0 }
b0 |
bx {
bx z
b0 y
b0 x
b0 w
b0 v
b0 u
xt
bx s
xr
xq
b0 p
xo
xn
xm
0l
bx k
bx j
b0 i
b0 h
b0 g
b0 f
b0 e
bz d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b10100000000000010010011 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
0T
0S
0R
0Q
0P
0O
b0 N
0M
b0 L
0K
b0 J
xI
xH
xG
xF
xE
bx D
xC
b0 B
b0 A
b10100000000000010010011 @
b0 ?
b0 >
b0 =
0<
0;
0:
b0 9
08
bx 7
06
b0 5
b0 4
bx 3
02
b0 1
b0 0
b0 /
b0 .
b0 -
0,
b0 +
b0 *
b10100000000000010010011 )
0(
z'
bz &
1%
0$
bx #
1"
0!
$end
#5
0"
#10
0F
0E
0H
b0 D
b0 z
b0 4"
0C
0I
0G
b10 U
b10 ^
b10 b
1M
1K
b10 L
b10 _
b10 c
b101 J
b101 a
b101 e
x;
x;"
x:
x<"
bx 9
bx 8"
bx Q"
bx ="
x8
x>"
x<
x:"
xB"
xA"
0q
0r
0n
b0 s
0t
0m
0o
b0 j
b0 {
b0 k
bz p
b0 7
b0 3"
b0 P"
b0 3
b0 9"
b0 E"
b10011 Y
b1 N
b1 ]
b1 f
b101 0
b101 W
b101 H"
b101 V
b100000000000000010011 @
b100000000000000010011 Z
b100000000000000010011 ,"
b100000000000000010011 )
b100000000000000010011 ."
b100000000000000010011 O"
b10100000000000010010011 `
b1 *
b1 -"
b1 N"
b1 ?
b1 /"
b1 0"
1$
1!
#20
0$
0!
#30
b101 >
0*"
b101 B
b101 i
b101 )"
b101 1"
b1 D
b1 z
b1 4"
1C
b101 y
b101 }
x,
x(
bx -
bx J"
bx Z"
b10 U
b10 ^
b10 b
b10 L
b10 _
b10 c
1K
1M
b1 J
b1 a
b1 e
b1 s
1t
b10 j
b10 {
b10 k
1l
b101 u
0;
0;"
0:
0<"
b0 9
b0 8"
b0 Q"
b0 ="
08
0>"
0<
0:"
0B"
0A"
xV"
xT"
bx U"
xS"
b0 N
b0 ]
b0 f
b1 0
b1 W
b1 H"
b1 V
b10 *
b10 -"
b10 N"
b10 ?
b10 /"
b10 0"
b100000000000000010011 `
1$
1!
#40
0$
0!
#50
b1 >
b1 B
b1 i
b1 )"
b1 1"
0,
0(
b0 -
b0 J"
b0 Z"
b0 D
b0 z
b0 4"
b1 y
b1 }
0V"
0T"
b0 U"
0S"
b1 9
b1 8"
b1 Q"
b1 ="
18
1>"
b101 =
b101 7"
b101 R"
b101 5
b101 5"
b101 C"
b101 ?"
b0 s
b1 u
b11 *
b11 -"
b11 N"
b11 ?
b11 /"
b11 0"
1$
1!
#60
0$
0!
#70
b101 .
b101 g
b101 K"
1,
b1 -
b1 J"
b1 Z"
b101 +
b101 I"
b101 Y"
b0 9
b0 8"
b0 Q"
b0 ="
b1 =
b1 7"
b1 R"
b1 5
b1 5"
b1 C"
b1 ?"
1V"
b1 U"
b101 X"
b100 *
b100 -"
b100 N"
b100 ?
b100 /"
b100 0"
1$
1!
#80
0$
0!
#90
b101 .
b101 g
b101 K"
b0 -
b0 J"
b0 Z"
b1 +
b1 I"
b1 Y"
b1 y
b1 }
b0 U"
b1 X"
b101 A
b101 w
b101 2"
b1000000000100001000000100110011 @
b1000000000100001000000100110011 Z
b1000000000100001000000100110011 ,"
b1000000000100001000000100110011 )
b1000000000100001000000100110011 ."
b1000000000100001000000100110011 O"
b101 *
b101 -"
b101 N"
b101 ?
b101 /"
b101 0"
1$
1!
#100
0$
0!
#110
b110 U
b110 ^
b110 b
b10 L
b10 _
b10 c
0K
1M
b10000000001 J
b10000000001 a
b10000000001 e
b101 4
b101 6"
b101 D"
b101 @"
b101 /
b101 h
b101 L"
b100000000000000010011 @
b100000000000000010011 Z
b100000000000000010011 ,"
b100000000000000010011 )
b100000000000000010011 ."
b100000000000000010011 O"
b110011 Y
b10 N
b10 ]
b10 f
b1 1
b1 X
b1 G"
b100000 [
b110 *
b110 -"
b110 N"
b110 ?
b110 /"
b110 0"
b1000000000100001000000100110011 `
1$
1!
#120
0$
0!
#130
b10 D
b10 z
b10 4"
b101 x
b101 |
b101 y
b101 }
b100000 >
0*"
b10100000 B
b10100000 i
b10100000 )"
b10100000 1"
1K
b10 U
b10 ^
b10 b
b10 L
b10 _
b10 c
1M
b1 J
b1 a
b1 e
b10 s
b110 j
b110 {
0l
b10000000001 u
b101 v
b0 /
b0 h
b0 L"
b10011 Y
b0 N
b0 ]
b0 f
b0 1
b0 X
b0 G"
b0 [
b100000000000000010011 `
b111 *
b111 -"
b111 N"
b111 ?
b111 /"
b111 0"
1$
1!
#140
0$
0!
#150
b0 D
b0 z
b0 4"
b1 y
b1 }
b0 x
b0 |
b1 >
b1 B
b1 i
b1 )"
b1 1"
b0 s
b10 j
b10 {
1l
b1 u
b0 v
b10 9
b10 8"
b10 Q"
b10 ="
b10100000 =
b10100000 7"
b10100000 R"
b10100000 5
b10100000 5"
b10100000 C"
b10100000 ?"
b1000 *
b1000 -"
b1000 N"
b1000 ?
b1000 /"
b1000 0"
1$
1!
#160
0$
0!
#170
b10 -
b10 J"
b10 Z"
b10100000 +
b10100000 I"
b10100000 Y"
b10 U"
b10100000 X"
b0 9
b0 8"
b0 Q"
b0 ="
b1 =
b1 7"
b1 R"
b1 5
b1 5"
b1 C"
b1 ?"
b1001 *
b1001 -"
b1001 N"
b1001 ?
b1001 /"
b1001 0"
1$
1!
#180
0$
0!
#190
b0 -
b0 J"
b0 Z"
b1 +
b1 I"
b1 Y"
b0 U"
b1 X"
b1100010000000110010011 @
b1100010000000110010011 Z
b1100010000000110010011 ,"
b1100010000000110010011 )
b1100010000000110010011 ."
b1100010000000110010011 O"
b1010 *
b1010 -"
b1010 N"
b1010 ?
b1010 /"
b1010 0"
1$
1!
#200
0$
0!
#210
b10 U
b10 ^
b10 b
b10 L
b10 _
b10 c
1K
1M
b11 J
b11 a
b11 e
b0 .
b0 g
b0 K"
b10100000 /
b10100000 h
b10100000 L"
b11 N
b11 ]
b11 f
b10 1
b10 X
b10 G"
b11 0
b11 W
b11 H"
b11 V
b100000000000000010011 @
b100000000000000010011 Z
b100000000000000010011 ,"
b100000000000000010011 )
b100000000000000010011 ."
b100000000000000010011 O"
b1100010000000110010011 `
b1011 *
b1011 -"
b1011 N"
b1011 ?
b1011 /"
b1011 0"
1$
1!
#220
0$
0!
#230
b100011 >
b10100011 B
b10100011 i
b10100011 )"
b10100011 1"
b11 D
b11 z
b11 4"
b10100000 x
b10100000 |
b11 y
b11 }
b10 U
b10 ^
b10 b
b10 L
b10 _
b10 c
1K
1M
b1 J
b1 a
b1 e
b11 s
b11 u
b0 A
b0 w
b0 2"
b10100000 v
b101 .
b101 g
b101 K"
b0 /
b0 h
b0 L"
b0 N
b0 ]
b0 f
b0 1
b0 X
b0 G"
b1 0
b1 W
b1 H"
b1 V
b1100 *
b1100 -"
b1100 N"
b1100 ?
b1100 /"
b1100 0"
b100000000000000010011 `
1$
1!
#240
0$
0!
#250
b1 >
b1 B
b1 i
b1 )"
b1 1"
b0 D
b0 z
b0 4"
b1 y
b1 }
b0 x
b0 |
b11 9
b11 8"
b11 Q"
b11 ="
b0 4
b0 6"
b0 D"
b0 @"
b10100011 =
b10100011 7"
b10100011 R"
b10100011 5
b10100011 5"
b10100011 C"
b10100011 ?"
b0 s
b1 u
b101 A
b101 w
b101 2"
b0 v
b1101 *
b1101 -"
b1101 N"
b1101 ?
b1101 /"
b1101 0"
1$
1!
#260
0$
0!
#270
b11 -
b11 J"
b11 Z"
b10100011 +
b10100011 I"
b10100011 Y"
b0 9
b0 8"
b0 Q"
b0 ="
b101 4
b101 6"
b101 D"
b101 @"
b1 =
b1 7"
b1 R"
b1 5
b1 5"
b1 C"
b1 ?"
b11 U"
b10100011 X"
b1110 *
b1110 -"
b1110 N"
b1110 ?
b1110 /"
b1110 0"
1$
1!
#280
0$
0!
#290
b0 -
b0 J"
b0 Z"
b1 +
b1 I"
b1 Y"
b0 U"
b1 X"
b1000011000001000010011 @
b1000011000001000010011 Z
b1000011000001000010011 ,"
b1000011000001000010011 )
b1000011000001000010011 ."
b1000011000001000010011 O"
b1111 *
b1111 -"
b1111 N"
b1111 ?
b1111 /"
b1111 0"
1$
1!
#300
0$
0!
#310
b10 U
b10 ^
b10 b
b10 L
b10 _
b10 c
1K
1M
b10 J
b10 a
b10 e
b10100000 .
b10100000 g
b10100000 K"
b10100011 /
b10100011 h
b10100011 L"
b100000000000000010011 @
b100000000000000010011 Z
b100000000000000010011 ,"
b100000000000000010011 )
b100000000000000010011 ."
b100000000000000010011 O"
b100 N
b100 ]
b100 f
b11 1
b11 X
b11 G"
b10 0
b10 W
b10 H"
b10 V
b10000 *
b10000 -"
b10000 N"
b10000 ?
b10000 /"
b10000 0"
b1000011000001000010011 `
1$
1!
#320
0$
0!
#330
b100101 >
b10100101 B
b10100101 i
b10100101 )"
b10100101 1"
b100 D
b100 z
b100 4"
b10100011 x
b10100011 |
b10 y
b10 }
b10 U
b10 ^
b10 b
b10 L
b10 _
b10 c
1K
1M
b1 J
b1 a
b1 e
b100 s
b10 u
b10100000 A
b10100000 w
b10100000 2"
b10100011 v
b101 .
b101 g
b101 K"
b0 /
b0 h
b0 L"
b0 N
b0 ]
b0 f
b0 1
b0 X
b0 G"
b1 0
b1 W
b1 H"
b1 V
b100000000000000010011 `
b10001 *
b10001 -"
b10001 N"
b10001 ?
b10001 /"
b10001 0"
1$
1!
#340
0$
0!
#350
b1 >
b1 B
b1 i
b1 )"
b1 1"
b0 D
b0 z
b0 4"
b1 y
b1 }
b0 x
b0 |
b0 s
b1 u
b101 A
b101 w
b101 2"
b0 v
b100 9
b100 8"
b100 Q"
b100 ="
b10100000 4
b10100000 6"
b10100000 D"
b10100000 @"
b10100101 =
b10100101 7"
b10100101 R"
b10100101 5
b10100101 5"
b10100101 C"
b10100101 ?"
b10010 *
b10010 -"
b10010 N"
b10010 ?
b10010 /"
b10010 0"
1$
1!
#360
0$
0!
#370
b100 -
b100 J"
b100 Z"
b10100101 +
b10100101 I"
b10100101 Y"
b100 U"
b10100101 X"
b0 9
b0 8"
b0 Q"
b0 ="
b101 4
b101 6"
b101 D"
b101 @"
b1 =
b1 7"
b1 R"
b1 5
b1 5"
b1 C"
b1 ?"
b10011 *
b10011 -"
b10011 N"
b10011 ?
b10011 /"
b10011 0"
1$
1!
#380
0$
0!
#390
b0 -
b0 J"
b0 Z"
b1 +
b1 I"
b1 Y"
b0 U"
b1 X"
b100100000001010010011 @
b100100000001010010011 Z
b100100000001010010011 ,"
b100100000001010010011 )
b100100000001010010011 ."
b100100000001010010011 O"
b10100 *
b10100 -"
b10100 N"
b10100 ?
b10100 /"
b10100 0"
1$
1!
#400
0$
0!
#410
b10 U
b10 ^
b10 b
b10 L
b10 _
b10 c
1K
1M
b10100101 /
b10100101 h
b10100101 L"
b101 N
b101 ]
b101 f
b100 1
b100 X
b100 G"
b100000000000000010011 @
b100000000000000010011 Z
b100000000000000010011 ,"
b100000000000000010011 )
b100000000000000010011 ."
b100000000000000010011 O"
b100100000001010010011 `
b10101 *
b10101 -"
b10101 N"
b10101 ?
b10101 /"
b10101 0"
1$
1!
#420
0$
0!
#430
b100110 >
b10100110 B
b10100110 i
b10100110 )"
b10100110 1"
b101 D
b101 z
b101 4"
b10100101 x
b10100101 |
b1 y
b1 }
b10 U
b10 ^
b10 b
b10 L
b10 _
b10 c
1K
1M
b101 s
b10100101 v
b0 /
b0 h
b0 L"
b0 N
b0 ]
b0 f
b0 1
b0 X
b0 G"
b10110 *
b10110 -"
b10110 N"
b10110 ?
b10110 /"
b10110 0"
b100000000000000010011 `
1$
1!
#440
0$
0!
#450
b1 >
b1 B
b1 i
b1 )"
b1 1"
b0 D
b0 z
b0 4"
b1 y
b1 }
b0 x
b0 |
b101 9
b101 8"
b101 Q"
b101 ="
b10100110 =
b10100110 7"
b10100110 R"
b10100110 5
b10100110 5"
b10100110 C"
b10100110 ?"
b0 s
b0 v
b10111 *
b10111 -"
b10111 N"
b10111 ?
b10111 /"
b10111 0"
1$
1!
#460
0$
0!
#470
b101 -
b101 J"
b101 Z"
b10100110 +
b10100110 I"
b10100110 Y"
b0 9
b0 8"
b0 Q"
b0 ="
b1 =
b1 7"
b1 R"
b1 5
b1 5"
b1 C"
b1 ?"
b101 U"
b10100110 X"
b11000 *
b11000 -"
b11000 N"
b11000 ?
b11000 /"
b11000 0"
1$
1!
#480
0$
0!
#490
b0 -
b0 J"
b0 Z"
b1 +
b1 I"
b1 Y"
b0 U"
b1 X"
bx @
bx Z
bx ,"
bx )
bx ."
bx O"
b11001 *
b11001 -"
b11001 N"
b11001 ?
b11001 /"
b11001 0"
1$
1!
#500
0$
0!
#510
b0 U
b0 ^
b0 b
b0 L
b0 _
b0 c
0K
0M
b0xxxxxxxxxxxx J
b0xxxxxxxxxxxx a
b0xxxxxxxxxxxx e
b0x0x00xxx /
b0x0x00xxx h
b0x0x00xxx L"
b0x0x00xxx .
b0x0x00xxx g
b0x0x00xxx K"
bx Y
bx N
bx ]
bx f
bx 1
bx X
bx G"
bx 0
bx W
bx H"
b0xxxxx V
bx \
bx [
b11010 *
b11010 -"
b11010 N"
b11010 ?
b11010 /"
b11010 0"
bx `
1$
1!
#520
0$
0!
#530
bx D
bx z
bx 4"
0C
b0x0x00xxx x
b0x0x00xxx |
b0xxxxxxxxxxxx y
b0xxxxxxxxxxxx }
bx00xxx >
x*"
b0x0x00xxx B
b0x0x00xxx i
b0x0x00xxx )"
b0x0x00xxx 1"
bx s
0t
b0 j
b0 {
b0 k
0l
b0xxxxxxxxxxxx u
b0x0x00xxx A
b0x0x00xxx w
b0x0x00xxx 2"
b0x0x00xxx v
b11011 *
b11011 -"
b11011 N"
b11011 ?
b11011 /"
b11011 0"
1$
1!
#540
0$
0!
#550
bx 9
bx 8"
bx Q"
bx ="
08
0>"
b0x0x00xxx 4
b0x0x00xxx 6"
b0x0x00xxx D"
b0x0x00xxx @"
b0x0x00xxx =
b0x0x00xxx 7"
b0x0x00xxx R"
b0x0x00xxx 5
b0x0x00xxx 5"
b0x0x00xxx C"
b0x0x00xxx ?"
b11100 *
b11100 -"
b11100 N"
b11100 ?
b11100 /"
b11100 0"
1$
1!
#560
0$
0!
#570
0,
bx -
bx J"
bx Z"
b0x0x00xxx +
b0x0x00xxx I"
b0x0x00xxx Y"
0V"
bx U"
b0x0x00xxx X"
bx 7
bx 3"
bx P"
bx 3
bx 9"
bx E"
b11101 *
b11101 -"
b11101 N"
b11101 ?
b11101 /"
b11101 0"
1$
1!
#580
0$
0!
#590
b11110 *
b11110 -"
b11110 N"
b11110 ?
b11110 /"
b11110 0"
1$
1!
#600
0$
0!
#610
b11111 *
b11111 -"
b11111 N"
b11111 ?
b11111 /"
b11111 0"
1$
1!
#620
0$
0!
#630
b100000 *
b100000 -"
b100000 N"
b100000 ?
b100000 /"
b100000 0"
1$
1!
#640
0$
0!
#650
b100001 *
b100001 -"
b100001 N"
b100001 ?
b100001 /"
b100001 0"
1$
1!
#660
0$
0!
#670
b100010 *
b100010 -"
b100010 N"
b100010 ?
b100010 /"
b100010 0"
1$
1!
#680
0$
0!
#690
b100011 *
b100011 -"
b100011 N"
b100011 ?
b100011 /"
b100011 0"
1$
1!
#700
0$
0!
#710
b100100 *
b100100 -"
b100100 N"
b100100 ?
b100100 /"
b100100 0"
1$
1!
#720
0$
0!
#730
b100101 *
b100101 -"
b100101 N"
b100101 ?
b100101 /"
b100101 0"
1$
1!
#740
0$
0!
#750
b100110 *
b100110 -"
b100110 N"
b100110 ?
b100110 /"
b100110 0"
1$
1!
#760
0$
0!
#770
b100111 *
b100111 -"
b100111 N"
b100111 ?
b100111 /"
b100111 0"
1$
1!
#780
0$
0!
#790
b101000 *
b101000 -"
b101000 N"
b101000 ?
b101000 /"
b101000 0"
1$
1!
#800
0$
0!
#810
b101001 *
b101001 -"
b101001 N"
b101001 ?
b101001 /"
b101001 0"
1$
1!
#820
0$
0!
#830
b101010 *
b101010 -"
b101010 N"
b101010 ?
b101010 /"
b101010 0"
1$
1!
#840
0$
0!
#850
b101011 *
b101011 -"
b101011 N"
b101011 ?
b101011 /"
b101011 0"
1$
1!
#860
0$
0!
#870
b101100 *
b101100 -"
b101100 N"
b101100 ?
b101100 /"
b101100 0"
1$
1!
#880
0$
0!
#890
b101101 *
b101101 -"
b101101 N"
b101101 ?
b101101 /"
b101101 0"
1$
1!
#900
0$
0!
#910
b101110 *
b101110 -"
b101110 N"
b101110 ?
b101110 /"
b101110 0"
1$
1!
#920
0$
0!
#930
b101111 *
b101111 -"
b101111 N"
b101111 ?
b101111 /"
b101111 0"
1$
1!
#940
0$
0!
#950
b110000 *
b110000 -"
b110000 N"
b110000 ?
b110000 /"
b110000 0"
1$
1!
#960
0$
0!
#970
b110001 *
b110001 -"
b110001 N"
b110001 ?
b110001 /"
b110001 0"
1$
1!
#980
0$
0!
#990
b110010 *
b110010 -"
b110010 N"
b110010 ?
b110010 /"
b110010 0"
1$
1!
#1000
0$
0!
#1005
b111 #
